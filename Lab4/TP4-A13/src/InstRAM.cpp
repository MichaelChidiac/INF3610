///////////////////////////////////////////////////////////////////////////////
//
//	InstRAM.cpp
//
///////////////////////////////////////////////////////////////////////////////
#include "InstRAM.h"

///////////////////////////////////////////////////////////////////////////////
//
//	Constructeur
//
///////////////////////////////////////////////////////////////////////////////
InstRAM::InstRAM( sc_module_name zName, const char *zBinaryFileName, unsigned long ulRAMSize, bool bVerbose )
:RAM(zName, zBinaryFileName, ulRAMSize, bVerbose)
{	
}


///////////////////////////////////////////////////////////////////////////////
//
//	Destructeur
//
///////////////////////////////////////////////////////////////////////////////
InstRAM::~InstRAM()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//	Read
//
///////////////////////////////////////////////////////////////////////////////
unsigned int InstRAM::Read(unsigned int uiAddr)
{
	// On appele la classe parent
	return RAM::ReadInt(uiAddr);
}
		
///////////////////////////////////////////////////////////////////////////////
//
//	Write
//
///////////////////////////////////////////////////////////////////////////////
void InstRAM::Write(unsigned int uiAddr, unsigned char ucData)
{
	cout << "Il est impossible d'écrire dans la mémoire d'instruction" << endl;
	
	// Fin de la simulation
	sc_stop();
}
